[
    {
        "id": "9e2990e28006b0c1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2f9f1bd9995523e",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0fe69ee976e6e969",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c5c14dcb012cf313",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5c2965b3f2e0df03",
        "type": "mqtt-broker",
        "name": "server 103",
        "broker": "103.143.170.181",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "7c67f0434440a894",
        "type": "minio-config",
        "name": "MinIO Instance",
        "host": "194.233.68.235",
        "port": "9000",
        "useSsl": false
    },
    {
        "id": "c7c0605c05032967",
        "type": "mqtt in",
        "z": "9e2990e28006b0c1",
        "name": "Recv sensor data",
        "topic": "sensor/data",
        "qos": "1",
        "datatype": "json",
        "broker": "c5c14dcb012cf313",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "e1f4aece9e250923"
            ]
        ]
    },
    {
        "id": "58ba75e0f6719d30",
        "type": "function",
        "z": "9e2990e28006b0c1",
        "name": "Kafka producer",
        "func": "const producer = context.get('producer')\n\nconst run = async () => {\n  // Producing\n  await producer.connect()\n  await producer.send({\n    topic: 'poi-data',\n    messages: [\n      { \n          key: msg.id,\n          value: JSON.stringify(msg)\n      },\n    ],\n  })\n}\n\nrun().catch(node.error)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst kafka = new kafkajs.Kafka({\n  clientId: 'client',\n  brokers: ['kafka:9092']\n})\n\ncontext.set('producer', kafka.producer());\n",
        "finalize": "",
        "libs": [
            {
                "var": "kafkajs",
                "module": "kafkajs"
            }
        ],
        "x": 1200,
        "y": 180,
        "wires": [],
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "3f551a844f02a43a",
        "type": "mqtt out",
        "z": "9e2990e28006b0c1",
        "name": "Send sensor data",
        "topic": "sensor/data",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c5c14dcb012cf313",
        "x": 430,
        "y": 440,
        "wires": []
    },
    {
        "id": "dfbd66c3812f6e30",
        "type": "inject",
        "z": "9e2990e28006b0c1",
        "name": "Fake gateway w/ pos",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "sensor/data",
        "payload": "{\"noise\":76.6,\"ts\":1649164799169,\"reliability\":0.7,\"lat\":45.4785374,\"lon\":9.2300135}",
        "payloadType": "json",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "3f551a844f02a43a"
            ]
        ]
    },
    {
        "id": "14739b731c1ddda2",
        "type": "csv",
        "z": "9e2990e28006b0c1",
        "name": "Points of interest",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "id,lat,lon,noise",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "5b2e766bd4d58d0d"
            ]
        ]
    },
    {
        "id": "8610cac4be5fe3db",
        "type": "file in",
        "z": "9e2990e28006b0c1",
        "name": "poi.csv",
        "filename": "/data/input/poi.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "14739b731c1ddda2"
            ]
        ]
    },
    {
        "id": "200188dc75b1e30a",
        "type": "debug",
        "z": "9e2990e28006b0c1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 20,
        "wires": []
    },
    {
        "id": "934f75e3e4970af1",
        "type": "inject",
        "z": "9e2990e28006b0c1",
        "name": "Trigger read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "8610cac4be5fe3db"
            ]
        ]
    },
    {
        "id": "1b1b1a2359d7fb77",
        "type": "function",
        "z": "9e2990e28006b0c1",
        "name": "Aggregator",
        "func": "function ema(acc, x, alpha) {\n    return acc * (1.0 - alpha) + x * alpha;\n}\n\nfunction distance(lat0, lon0, lat1, lon1) {\n  let p = 0.017453292519943295;    // Math.PI / 180\n  let c = Math.cos;\n  let a = 0.5 - c((lat1 - lat0) * p)/2 + \n          c(lat0 * p) * c(lat1 * p) * \n          (1 - c((lon1 - lon0) * p))/2;\n\n  return 1000.0 * 12742.0 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\n}\n\nfunction distance_factor(d) {\n    const m = 20.0;\n    if (d < m) {\n        return 1.0;\n    } else {\n        return Math.exp((m - d)/50.0);\n    }\n}\n\nfunction update(poi, reading) {\n    let d = distance(poi.lat, poi.lon, reading.lat, reading.lon);\n    let alpha = 0.3 * reading.reliability * distance_factor(d);\n    \n    return ema(poi.noise, reading.noise, alpha);\n}\n\nif (msg.kind === \"sensor-data\") {\n    let map = context.get('map');\n    map = map.map(function(poi) {\n        poi.noise = update(poi, msg.payload);\n        return poi;\n    })\n    context.set('map', map);\n    \n    let kafkaMsgs = map.map(function(poi) {\n        return {\n            id: poi.id,\n            noise: poi.noise,\n            ts: Date.now(),\n        }\n    });\n    \n    return [kafkaMsgs];\n} else if (msg.kind === \"poi\") {\n    context.set('map', msg.payload);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (context.get(\"map\") === undefined) {\n    context.set(\"map\", [])\n}",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 180,
        "wires": [
            [
                "58ba75e0f6719d30",
                "200188dc75b1e30a"
            ]
        ]
    },
    {
        "id": "5b2e766bd4d58d0d",
        "type": "change",
        "z": "9e2990e28006b0c1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kind",
                "pt": "msg",
                "to": "poi",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 60,
        "wires": [
            [
                "1b1b1a2359d7fb77"
            ]
        ]
    },
    {
        "id": "e1f4aece9e250923",
        "type": "change",
        "z": "9e2990e28006b0c1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kind",
                "pt": "msg",
                "to": "sensor-data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 180,
        "wires": [
            [
                "1b1b1a2359d7fb77"
            ]
        ]
    },
    {
        "id": "be7979ee71a9292c",
        "type": "inject",
        "z": "b2f9f1bd9995523e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"index\": \"myindex\"}",
        "payloadType": "json",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "bb1a6e09da5e6370"
            ]
        ]
    },
    {
        "id": "7091bd1a00f0389e",
        "type": "debug",
        "z": "b2f9f1bd9995523e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 640,
        "wires": []
    },
    {
        "id": "bb1a6e09da5e6370",
        "type": "debug",
        "z": "b2f9f1bd9995523e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 560,
        "wires": []
    },
    {
        "id": "2a4c358d4fa1453d",
        "type": "inject",
        "z": "b2f9f1bd9995523e",
        "d": true,
        "name": "Fake sensor data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "sensor/data",
        "payload": "{\"noise\":76.6,\"ts\":1649164799169,\"reliability\":0.7,\"lat\":45.4785374,\"lon\":9.2300135}",
        "payloadType": "json",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "09a12c9d1e9a3ab0"
            ]
        ]
    },
    {
        "id": "09a12c9d1e9a3ab0",
        "type": "mqtt out",
        "z": "b2f9f1bd9995523e",
        "name": "",
        "topic": "sensor/data",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5c2965b3f2e0df03",
        "x": 430,
        "y": 300,
        "wires": []
    },
    {
        "id": "5bea5ea39cd034cd",
        "type": "inject",
        "z": "0fe69ee976e6e969",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "759e964655c6c1f1",
                "e151cf187657cd66"
            ]
        ]
    },
    {
        "id": "21776098fa371453",
        "type": "debug",
        "z": "0fe69ee976e6e969",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 180,
        "wires": []
    },
    {
        "id": "759e964655c6c1f1",
        "type": "buckets",
        "z": "0fe69ee976e6e969",
        "buckets_name": "",
        "host": "7c67f0434440a894",
        "buckets_operation": "listBuckets",
        "buckets_bucket": "",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "21776098fa371453"
            ],
            [
                "21776098fa371453"
            ]
        ]
    },
    {
        "id": "e151cf187657cd66",
        "type": "files",
        "z": "0fe69ee976e6e969",
        "files_name": "",
        "host": "7c67f0434440a894",
        "files_operation": "fGetObject",
        "files_bucket": "track",
        "files_object": "example.txt",
        "files_filepath": "example.txt",
        "files_metadata": "",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "21776098fa371453"
            ],
            [
                "21776098fa371453"
            ]
        ]
    }
]